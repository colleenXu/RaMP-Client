pipeline {
    options {
        timestamps()
        skipDefaultCheckout()
    }
    agent {
        node { label 'internal-build.ncats'}
    }
    parameters {
        string(name: 'BUILD_VERSION', defaultValue: '', description: 'The build version to deploy (optional)')
    }
    triggers {
        pollSCM('H/5 * * * *')
    }
    environment {
        PROJECT_NAME = "rampdb-client"
        PACKAGE_DIR = "apps/ramp-client"
        DOCKER_REPO_NAME = "684150170045.dkr.ecr.us-east-1.amazonaws.com/rampdb-client"
    }
    stages {
        stage('Build Version') {
            when {
                expression {
                    return !params.BUILD_VERSION
                }
            }
            steps{
                script {
                    BUILD_VERSION_GENERATED = VersionNumber(
                        versionNumberString: 'v${BUILD_YEAR, XX}.${BUILD_MONTH, XX}${BUILD_DAY, XX}.${BUILDS_TODAY}',
                        projectStartDate:    '1970-01-01',
                        skipFailedBuilds:    true)
                    currentBuild.displayName = BUILD_VERSION_GENERATED
                    env.BUILD_VERSION = BUILD_VERSION_GENERATED
                    env.BUILD = 'true'
                }
            }
        }
        stage('Build') {
            when {
                expression {
                       return env.BUILD == 'true'
                }
            }
            steps {
                sshagent (credentials: ['labsharesvc']) {
                    withEnv([
                        "IMAGE_NAME=rampdb-client",
                        "BUILD_VERSION=" + (params.BUILD_VERSION ?: env.BUILD_VERSION)
                    ]) {
                        checkout scm
                        sh 'docker pull labshare/docker-base-web'
                        configFileProvider([
                            configFile(fileId: 'rampdb-client-environment-ci.yml', targetLocation: 'apps/ramp-client/src/environments/environment.prod.ts')
                        ]) {
                            script {
                                def image = docker.build("${env.IMAGE_NAME}", "-f ${env.PACKAGE_DIR}/Dockerfile --no-cache .")
                                docker.withRegistry("https://684150170045.dkr.ecr.us-east-1.amazonaws.com", "ecr:us-east-1:aws-jenkins-build") {
                                    docker.image("${env.IMAGE_NAME}").push("${env.BUILD_VERSION}")
                                }
                                docker.withRegistry("https://registry.ncats.nih.gov:5000", "564b9230-c7e3-482d-b004-8e79e5e9720a") {
                                    docker.image("${env.IMAGE_NAME}").push("${env.BUILD_VERSION}")
                                }
                            }
                        }
                    }
                }
            }
        }
        stage('Deploy Application') {
            agent {
                node { label 'rampdb-ci-ec2-02'}
            }
            steps {
                cleanWs()
                configFileProvider([
                    configFile(fileId: 'rampdb-client-docker-compose.yml', targetLocation: 'docker-compose.yml')
                ]) {
                    withEnv([
                            "IMAGE_NAME=rampdb-client",
                            "BUILD_VERSION=" + (params.BUILD_VERSION ?: env.BUILD_VERSION)
                    ]) {
                        withAWS(credentials:'aws-jenkins-build') {
                            sh '''
                            export DOCKER_LOGIN="`aws ecr get-login --no-include-email --region us-east-1`"
                            $DOCKER_LOGIN
                            '''
                            ecrLogin()
                            script {
                                def docker = new org.labshare.Docker()
                                docker.deployDockerUI()
                            }
                        }
                    }
                }
            }
        }
        stage('Build for Production') {
            when {
                expression {
                       return env.BUILD == 'true'
                }
            }
            steps {
                sshagent (credentials: ['labsharesvc']) {
                    withEnv([
                        "IMAGE_NAME=rampdb-client-prod",
                        "BUILD_VERSION=" + (params.BUILD_VERSION ?: env.BUILD_VERSION)
                    ]) {
                        checkout scm
                        configFileProvider([
                            configFile(fileId: 'rampdb-client-environment-prod.yml', targetLocation: 'apps/ramp-client/src/environments/environment.prod.ts')
                        ]) {
                            script {
                                def image = docker.build("${env.IMAGE_NAME}", "-f ${env.PACKAGE_DIR}/Dockerfile --no-cache .")
                                docker.withRegistry("https://registry.ncats.nih.gov:5000", "564b9230-c7e3-482d-b004-8e79e5e9720a") {
                                    docker.image("${env.IMAGE_NAME}").push("${env.BUILD_VERSION}")
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
