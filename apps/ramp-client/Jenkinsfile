pipeline {
    options {
        timestamps()
    }
    parameters {
        string(name: 'BUILD_VERSION', defaultValue: '', description: 'The build version to deploy (optional)')
        string(name: 'ENVIRONMENT', defaultValue: 'ci', description: 'Role Name (mandatory)')
    }
    agent {
        label 'ci && rampdb'
    }
    triggers {
        pollSCM('H/5 * * * *')
    }  
    environment {
        PROJECT_NAME     = "rampdb"
        DOCKER_REPO_NAME = "853771734544.dkr.ecr.us-east-1.amazonaws.com/rampdb-client"
        APP_TYPE         = "ui"                                                          // Application Type is required to get Secret from Vault //
        INIT_TOKEN       = credentials('Vault-Access')                                   // OIDC provider this token is Auto Generated //
        SPHINX_TOKEN     = credentials('ncatssvcdvops-sphix')                           // PatToken Read Only Access for the DevOps Artifacts Repo https://github.com/Sphinx-Automation/devops-pipeline-artifacts.git //
        ROLE_NAME        = "$ENVIRONMENT-$PROJECT_NAME"                                  // Role Name is Mandatory Variable for Vault //
    }
    stages {
        stage('Build Version') {
            when {
                allOf {
                    expression {
                        return !params.BUILD_VERSION
                    }
                    anyOf {
                        changeset "apps/ramp-client/*"
                        triggeredBy 'UserIdCause'
                    }
                }
            }
            steps{
                script {
                    BUILD_VERSION_GENERATED = VersionNumber(
                        versionNumberString: 'v${BUILD_YEAR, XX}.${BUILD_MONTH, XX}${BUILD_DAY, XX}.${BUILDS_TODAY}',
                        projectStartDate:    '1970-01-01',
                        skipFailedBuilds:    true)
                    currentBuild.displayName = BUILD_VERSION_GENERATED
                    env.BUILD_VERSION = BUILD_VERSION_GENERATED
                    env.BUILD = 'true'
                }
            }
        }
        stage('Build CI Docker Image') {
            when {
                allOf {
                    expression {
                        return !params.BUILD_VERSION
                    }
                    anyOf {
                        changeset "apps/ramp-client/*"
                        triggeredBy 'UserIdCause'
                    }
                }
            }
            steps {
                 configFileProvider([
                    configFile(fileId: 'rampdb-client-environment-ci.yml', targetLocation: 'apps/ramp-client/src/environments/environment.prod.ts')
                ]){
                    script {
                        withEnv([
                            "BUILD_VERSION=" + (params.BUILD_VERSION ?: env.BUILD_VERSION)
                        ]) {
                            checkout scm
                            sh '''#!/bin/bash
                            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 853771734544.dkr.ecr.us-east-1.amazonaws.com
                            sed -e "s/registry.ncats.nih.gov:5000/853771734544.dkr.ecr.us-east-1.amazonaws.com/" apps/ramp-client/Dockerfile
                            cat apps/ramp-client/Dockerfile
                            docker build -f apps/ramp-client/Dockerfile --no-cache --build-arg BUILD_VERSION=${BUILD_VERSION} -t ${DOCKER_REPO_NAME} .
                            docker tag ${DOCKER_REPO_NAME}:latest ${DOCKER_REPO_NAME}:${BUILD_VERSION}-ci
                            docker push ${DOCKER_REPO_NAME}:${BUILD_VERSION}
                            '''
                        }
                    }
                }
            }
        }
        stage('Deploy Application in CI') {
            when {
                anyOf {
                    changeset "apps/ramp-client/*"
                    triggeredBy 'UserIdCause'
                }
            }
            steps {
                //cleanWs()
                checkout scm
                configFileProvider([
                   configFile(fileId: 'docker-compose-ui.yaml', targetLocation: 'docker-compose.yaml')
                ]) {
                    sh  """  
                        docker-compose -p $PROJECT_NAME-$APP_TYPE down -v --rmi all | xargs echo
                        docker pull $DOCKER_REPO_NAME:$BUILD_VERSION
                        docker rmi $DOCKER_REPO_NAME:current | xargs echo
                        docker tag $DOCKER_REPO_NAME:$BUILD_VERSION $DOCKER_REPO_NAME:current
                        docker-compose -p $PROJECT_NAME-$APP_TYPE up -d
                        docker rmi \$(docker images -aq) | xargs echo
                    """
                }
            }
        }
        stage('Docker/Apps getSecrets By Role for Prod Build') {
            agent {
                label 'build && internal-build.ncats && jenkins'
            }
            steps {
                cleanWs()
                checkout scm
                script {
                sh '''
                    ### Cloning the repo from DevOps Artifacts Repository Repo ###
                    git clone https://$SPHINX_TOKEN@github.com/Sphinx-Automation/devops-pipeline-artifacts.git
                    
                    ###  Running the script with Env specific to Authenticate Vault & Get Application Secrets for Docker Token###
                    cd devops-pipeline-artifacts/application
                    /bin/bash getNcatsDockerSecretsByRole.sh
                    /bin/bash getAppSecretsByRole.sh
                    '''
                }
            }
        }
        stage('Build Prod Docker Image') {
            agent {
                label 'build && internal-build.ncats && jenkins'
            }
            when {
                allOf {
                    expression {
                        return !params.BUILD_VERSION
                    }
                    anyOf {
                        changeset "apps/ramp-client/*"
                        triggeredBy 'UserIdCause'
                    }
                }
            }
            steps {
                configFileProvider([
                    configFile(fileId: 'rampdb-client-environment-prod.yml', targetLocation: 'apps/ramp-client/src/environments/environment.prod.ts'),
                    configFile(fileId: 'prepare.sh', targetLocation: 'prepare.sh')
                ]){
                    script {
                        withEnv([
                            "BUILD_VERSION=" + (params.BUILD_VERSION ?: env.BUILD_VERSION),
                        ]) {
                            checkout scm
                            sh '''#!/bin/bash
                            source prepare.sh
                            docker login https://registry.ncats.nih.gov:5000 -u "${DOCKERLOGIN}" -p "${DOCKERPASSWORD}"
                            docker build -f apps/ramp-client/Dockerfile --no-cache --build-arg BUILD_VERSION=${BUILD_VERSION} -t ${DOCKER_REPO_NAME} .
                            docker tag ${DOCKER_REPO_NAME}:latest ${DOCKER_REPO_NAME}:${BUILD_VERSION}-prod
                            docker push ${DOCKER_REPO_NAME}:${BUILD_VERSION}-prod
                            '''
                        }
                    }
                }
                post {
                    always {
                        echo " Clean up the workspace in deploy node!"
                        cleanWs()
                    }
                }
            }
        }
    }
}
