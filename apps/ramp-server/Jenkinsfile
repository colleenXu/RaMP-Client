pipeline {
    options {
        timestamps()
        skipDefaultCheckout()
    }
    agent {
        label 'ci && rampdb'
    }
    parameters {
        string(name: 'BUILD_VERSION', defaultValue: '', description: 'The build version to deploy (optional)')
    }
    triggers {
        pollSCM('H/5 * * * *')
    }
    environment {
        PROJECT_NAME     = "rampdb"
        DOCKER_REPO_NAME = "853771734544.dkr.ecr.us-east-1.amazonaws.com/rampdb-api"
        APP_TYPE         = "api" 
    }
    stages {
        stage('Build Version') {
            when {
                expression {
                    return !params.BUILD_VERSION
                }
            }
            steps{
                script {
                    BUILD_VERSION_GENERATED = VersionNumber(
                        versionNumberString: 'v${BUILD_YEAR, XX}.${BUILD_MONTH, XX}${BUILD_DAY, XX}.${BUILDS_TODAY}',
                        projectStartDate:    '1970-01-01',
                        skipFailedBuilds:    true)
                    currentBuild.displayName = BUILD_VERSION_GENERATED
                    env.BUILD_VERSION = BUILD_VERSION_GENERATED
                    env.BUILD = 'true'
                }
            }
        }
        stage('Build Docker Image') {
            when {
                expression {
                    return !params.BUILD_VERSION
                }
            }
            steps {
                script {
                    withEnv([
                        "BUILD_VERSION=" + (params.BUILD_VERSION ?: env.BUILD_VERSION)
                    ]) {
                        checkout scm
                        sh '''#!/bin/bash
                        aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 853771734544.dkr.ecr.us-east-1.amazonaws.com
                        docker build -f apps/ramp-client/Dockerfile --no-cache --build-arg BUILD_VERSION=${BUILD_VERSION} -t ${DOCKER_REPO_NAME} .
                        docker tag ${DOCKER_REPO_NAME}:latest ${DOCKER_REPO_NAME}:${BUILD_VERSION}
                        docker push ${DOCKER_REPO_NAME}:${BUILD_VERSION}
                        '''
                    }
                }
            }
        }
        stage('Deploy Application') {
            steps {
                checkout scm
                configFileProvider([
                    configFile(fileId: 'ramp-api-config.yml', targetLocation: 'config.yml'),
                    configFile(fileId: 'docker-compose-api.yaml', targetLocation: 'docker-compose.yml'),
                    configFile(fileId: 'runRampServer.R', targetLocation: 'runRamp.R')
                ]) {
                    sh  """  
                        docker-compose -p $PROJECT_NAME-$APP_TYPE down -v --rmi all | xargs echo
                        docker pull $DOCKER_REPO_NAME:$BUILD_VERSION
                        docker rmi $DOCKER_REPO_NAME:current | xargs echo
                        docker tag $DOCKER_REPO_NAME:$BUILD_VERSION $DOCKER_REPO_NAME:current
                        docker-compose -p $PROJECT_NAME-$APP_TYPE up -d
                        docker rmi \$(docker images -aq) | xargs echo
                    """
                }
            }
            post {
               always {
                    echo " Clean up the workspace in deploy node!"
                    cleanWs()
                }
            }
        }
    }
}
